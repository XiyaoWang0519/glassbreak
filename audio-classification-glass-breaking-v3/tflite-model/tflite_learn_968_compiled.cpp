/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 11.02.2025 03:24:44

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 8896;
#else
constexpr int kTensorArenaSize = 7872;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,2535 } };
const TfArray<1, float> quant0_scale = { 1, { 0.012580558657646179, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 39, 65, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 39, 1, 16, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 20, 16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 20, 1, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 10, 32, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[4] = { 1, 10, 1, 64, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data7[2] = { -1, 320, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data8[2] = { -1749, 1749, };
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<1, float> quant8_scale = { 1, { 6.0936075897188857e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[2*320] = { 
  37, 12, -4, -16, -60, 60, 58, -67, 45, -17, 35, 15, 24, -10, -9, -37, -49, -3, 44, -24, 69, 25, -1, -9, -50, 55, -15, -12, -78, -96, -2, -6, -17, 3, 44, -20, -36, 41, 1, -11, -60, -11, 35, 41, 0, -37, 49, -28, 15, 39, 21, 5, 39, -53, 45, -9, 38, -32, -64, 7, -21, 1, 17, 6, 33, -24, 34, -20, 33, 40, 74, -27, -3, -6, 10, 21, 49, -65, -73, 13, 12, -96, -33, 16, 13, 62, -44, -36, 33, 77, -69, -57, -42, 41, -41, -54, 64, -121, 31, 88, 55, 77, -14, -69, 59, -25, 53, 53, -89, 49, 29, 36, -6, 84, -60, 37, -119, -34, -99, 19, -11, 6, 27, -5, 38, -83, -1, -54, 28, 2, -18, -4, 9, 22, 46, -48, 41, -44, -29, -9, 79, -22, 11, 34, 52, 73, -48, -54, -23, 14, -74, -58, -55, 108, -42, -22, -33, 35, -32, -73, 31, -22, -36, 55, 89, 90, 8, -44, 4, 7, 20, 12, -46, 7, -41, 104, -7, 7, 34, -2, 6, -14, -32, 90, -64, -2, 46, -71, 19, -15, 22, 34, 11, -32, -23, -43, 12, 26, 69, -37, -9, 5, -32, -72, -39, -28, -80, -60, 2, -20, -60, 0, -29, 28, -19, -11, -42, 28, -52, -18, -9, -46, 12, -3, -27, 17, -39, 51, 50, 20, -30, -25, -24, 17, -46, -69, -45, -44, -16, 17, 6, 61, -68, -13, -17, 31, -17, -36, -20, -36, 7, -38, 8, 13, -22, -108, -68, -43, -3, 30, -36, -25, -65, -22, 35, -47, -3, 26, 18, -59, -29, -19, -51, -18, -9, -41, -2, -22, -19, -2, 9, -4, 7, 30, 5, -22, -26, -15, -36, 45, -12, -16, -63, -35, 35, -48, -33, -35, -30, -4, 0, -45, -56, 66, -55, -70, -11, 20, -1, 19, -37, -32, -52, -57, -57, -12, -26, -25, -30, -13, 
  -81, -76, -66, -38, -5, 3, -39, 17, -24, -48, -11, -3, -27, 39, 10, 12, 37, 10, -14, 34, -18, -25, 46, 41, 53, -18, 21, 30, 26, 50, -46, 60, -50, 37, -23, 21, 30, -81, 1, 19, 24, 25, -17, -46, -11, -18, -6, 28, -40, -40, 56, -17, 16, 52, -47, -53, 45, -26, 34, -16, 1, 19, -65, -20, 1, 41, -13, 43, -4, -94, -31, -12, -5, 77, -42, -22, -21, 32, 41, -2, -72, 127, -19, 15, -51, 0, 54, 41, -43, -60, 61, 8, 45, 6, 44, -9, -20, 53, -57, -90, 13, -56, -44, 68, -12, 52, -3, -53, 33, -6, -93, -79, 13, -74, 65, 9, 97, 6, 41, -50, -20, 30, -33, -2, -15, 26, 25, 28, 25, -26, -26, 54, 33, 39, -45, -24, -26, 23, 13, 41, -82, 83, 40, 24, 26, -8, -31, 16, 34, -62, 28, 15, 52, -86, -38, 22, -2, 34, 29, 118, -34, -36, -28, -118, -37, -27, -4, -21, -49, 67, 3, -9, 54, 8, 1, -58, -64, -32, 46, -38, -28, -49, 62, -79, 43, -22, -84, 55, -66, 63, -4, -19, -30, 24, -4, 109, 1, -5, -66, -20, -19, 32, 10, 36, 29, -11, 45, -12, 1, 25, 39, 36, 92, 5, 45, 66, -11, -74, 53, 61, 57, 36, 53, 14, -14, 8, 104, -51, -74, -51, 29, -28, -18, 31, 28, 6, 4, 5, 0, -75, 27, -12, 115, 37, 4, 26, 65, -21, -28, 76, 11, 37, 30, 26, 14, 106, -3, -31, 55, 24, 27, 55, 27, 68, 14, -3, 39, 25, -30, 13, -1, 18, 37, 35, 67, 43, 75, 8, 29, 40, 1, 53, 32, 33, -13, 44, 49, 23, 2, 4, -46, 28, -6, 29, -16, 122, 7, 40, 58, 8, 48, 8, 47, -93, 12, 43, 25, 31, -24, 19, 53, 19, -15, 27, -2, -18, -1, 1, 10, 11, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 2,320 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0030213107820600271, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[64] = { -1143, 186, -3797, -1291, -4011, -1030, -3452, -365, -3154, -1622, -3735, -2900, -1156, -468, 1173, -1535, -1602, -2586, -4175, -1239, -395, -2584, -941, -3132, -697, -1512, 530, -2651, 824, -1713, 373, 406, -1399, -240, 1071, -711, 147, -1831, -2383, -3640, -1816, -3121, -1734, -3435, -1546, -2162, -373, 578, -2191, -2105, 1906, -1383, 1841, -2698, -5886, -1264, 528, -2555, -510, 751, -4034, -1496, -2677, -1146, };
const TfArray<1, int> tensor_dimension10 = { 1, { 64 } };
const TfArray<64, float> quant10_scale = { 64, { 9.4726136012468487e-05, 6.997664604568854e-05, 7.7310731285251677e-05, 6.2570390582550317e-05, 7.4620373197831213e-05, 0.00015604244254063815, 7.5178133556619287e-05, 8.0750687629915774e-05, 7.8820223279763013e-05, 8.4969477029517293e-05, 7.899742922745645e-05, 0.0001012559441733174, 8.4552950283978134e-05, 0.00010052681318484247, 8.5996231064200401e-05, 8.4302693721838295e-05, 0.00010732173541327938, 8.369581337319687e-05, 0.00010517797636566684, 9.4819108198862523e-05, 8.826352859614417e-05, 7.7078519097995013e-05, 9.2617934569716454e-05, 8.3218779764138162e-05, 9.6317686256952584e-05, 9.3404341896530241e-05, 7.8524477430619299e-05, 7.839852332836017e-05, 0.00011219621228519827, 0.00011732090933946893, 8.9694520283956081e-05, 0.00011295732110738754, 9.0628353063948452e-05, 8.6346590251196176e-05, 8.0583966337144375e-05, 0.00010102651140186936, 0.00010297658445779234, 9.6947485872078687e-05, 5.9701280406443402e-05, 0.00010226511221844703, 7.6141652243677527e-05, 6.8606896093115211e-05, 0.00012467219494283199, 0.00011731567792594433, 0.00010985289554810151, 0.00011513778008520603, 9.9946119007654488e-05, 7.5287367508281022e-05, 8.2793179899454117e-05, 0.00012089919619029388, 8.7225387687794864e-05, 8.3823128079529852e-05, 9.94595538941212e-05, 0.00014057967928238213, 7.3023133154492825e-05, 0.00016858018352650106, 0.00013366869825404137, 7.6556687417905778e-05, 0.00011360809730831534, 9.0168970928061754e-05, 7.0301968662533909e-05, 0.00010887406097026542, 7.0403766585513949e-05, 9.7950949566438794e-05, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[64*1*3*32] = { 
  /* [0][0][][] */ -4,-125,-41,-31,1,-73,9,-40,-18,7,-46,70,-48,-56,-9,-4,-31,16,-38,-36,21,-65,9,-24,-87,-32,-10,-2,-1,2,-11,6, 7,-66,3,-98,-68,87,-17,8,-37,-27,-56,45,-3,24,3,6,4,4,-36,34,21,-15,61,-24,-96,28,-26,-98,20,-33,-45,-36, -32,50,-45,82,-55,-106,56,59,67,-127,17,-17,-69,15,-12,-55,0,45,9,47,1,-17,-4,23,-24,27,17,40,-69,-33,6,23, 
  /* [1][0][][] */ 22,-96,-43,-34,-43,127,-58,-76,18,-19,76,-25,57,73,5,-37,-78,-25,-39,29,59,-44,-64,36,-29,42,35,-88,9,31,54,42, -40,-80,-20,-18,-94,114,111,57,-99,2,-12,-43,-55,-35,88,11,65,5,45,35,-27,4,-39,36,-86,94,-2,-113,42,-119,-77,73, -28,-125,-2,10,-52,-67,-57,-50,72,-38,-17,-38,-32,-82,-30,46,-25,-19,-19,-30,-24,12,-7,-4,-5,9,-86,96,78,-35,-18,-15, 
  /* [2][0][][] */ -5,-122,-2,24,-1,67,81,86,-26,39,-101,86,-81,9,-8,-3,42,-29,66,-31,53,-16,-23,13,-72,39,-46,-22,-19,7,-43,52, -36,-63,-16,-46,18,-17,-55,-85,-11,-25,11,18,-38,-46,-90,0,-46,-36,31,-63,-5,10,-41,-43,32,-27,-44,-21,3,-39,-1,-2, 13,44,7,-24,19,30,27,6,29,-34,1,-121,-36,-5,20,-45,-56,-86,-20,32,-43,22,-86,-24,45,47,-30,65,59,19,31,127, 
  /* [3][0][][] */ -12,-79,29,5,-13,-58,-42,-5,-35,-1,-74,25,-118,-3,-88,-57,-89,-34,-39,29,-28,-17,3,-15,31,18,-127,-124,-25,48,-68,11, -3,-92,5,-21,-8,13,67,45,-38,31,-92,127,-57,14,58,-5,-110,4,10,23,-20,29,5,-19,26,106,25,-70,75,14,-16,48, 34,-88,26,14,90,11,-85,49,112,-32,-55,-126,13,89,74,27,-37,-93,36,-42,88,70,28,44,50,67,39,-80,59,19,-3,-39, 
  /* [4][0][][] */ 9,105,-5,53,-76,-63,-127,-15,3,-52,90,44,-7,-33,-76,25,-1,-32,-30,-48,-22,35,-51,-113,51,-99,-114,-39,-89,-20,-58,-11, 35,-5,15,-15,4,16,-32,-67,-23,2,-30,-27,33,32,-56,14,-18,11,27,-52,59,-28,-23,-40,10,-33,-46,-7,5,57,-51,-16, 13,76,42,-2,7,81,6,-44,-11,8,-12,76,-91,4,-66,34,-65,12,-28,-3,-26,-35,37,-14,-33,-39,44,5,38,51,51,28, 
  /* [5][0][][] */ -37,-48,-24,-5,-9,-1,36,16,16,8,4,127,12,-17,49,4,26,14,32,5,30,27,15,15,-1,23,-4,-32,-1,-31,-13,-2, 15,-25,12,-38,-15,40,-26,4,-19,-10,-25,-14,-45,28,8,-23,-16,-60,-38,14,-13,9,2,-34,-25,-26,-3,18,-38,32,61,16, -23,-6,16,10,-28,-8,-3,19,15,-30,-27,11,-43,-15,-24,-9,-9,-39,-23,3,3,-2,19,-9,6,0,-29,30,-34,-3,-2,-35, 
  /* [6][0][][] */ -2,-79,-5,-89,-10,16,-79,-75,-31,-3,-8,-14,-17,-40,-77,-5,-40,-12,-30,-24,-21,-32,-92,-46,-29,-16,30,59,-79,-17,-41,4, -86,-74,-2,-73,-25,102,-30,25,-88,-42,-108,18,25,53,21,-14,-66,-6,41,17,-20,40,-6,8,-65,75,-40,-44,22,17,29,17, -54,10,31,76,-4,-20,79,124,83,37,-23,-33,-127,45,-75,-18,-57,11,30,11,-89,46,18,-73,89,-31,-43,53,-91,-53,-38,19, 
  /* [7][0][][] */ -26,-82,-34,-55,-8,74,-12,-114,-62,-19,-13,44,-17,-33,21,-64,0,-62,-13,-25,-26,-19,0,16,-41,-23,2,-73,-69,4,-56,9, -58,40,-18,15,-19,2,-50,-93,23,-45,38,-70,-15,-58,19,12,-35,-105,-43,-40,2,-6,-63,-20,-30,-75,-87,-42,-41,-33,-23,-53, 50,-2,-2,30,19,79,36,-26,79,-31,4,122,-11,47,46,-42,-39,-10,-42,-35,78,-71,-23,29,7,127,62,20,84,-1,58,35, 
  /* [8][0][][] */ 35,-75,-62,-9,-13,57,-37,-46,-58,-18,51,-54,21,-27,-28,-21,8,-18,-27,-1,-8,40,-24,3,27,1,-33,-45,-2,-23,40,-30, -58,-118,27,-18,42,84,59,25,-52,13,57,34,-27,12,61,5,26,11,20,86,25,46,13,0,-49,8,-6,-108,-4,4,30,28, 9,-6,-7,54,-10,-64,-6,32,53,-1,-3,-47,-127,-2,-14,21,39,-120,1,-48,11,0,-56,-6,41,-13,-95,58,-19,3,-27,5, 
  /* [9][0][][] */ -69,-56,-17,73,33,5,30,-27,17,0,-48,21,71,10,102,-12,-36,-71,9,7,42,-14,51,15,29,48,-16,-65,127,-18,-2,-23, 4,-30,8,35,5,89,-5,-87,3,-51,-38,27,72,-34,47,-39,-41,-53,-15,29,24,-20,-49,20,-9,80,-7,-6,28,3,0,-24, -8,-56,-42,23,21,-67,-70,-9,0,7,-72,47,-13,26,4,18,-47,-17,-28,-15,26,-17,61,37,-50,-54,12,-127,-94,31,20,-34, 
  /* [10][0][][] */ -62,-112,17,9,5,30,45,-8,44,1,-16,-85,-35,-73,45,16,-89,10,31,-44,14,-11,13,-27,-46,-12,-33,-51,-12,-61,-37,9, 24,-51,5,-26,-49,59,-46,-80,6,-20,-38,-21,49,30,61,-30,20,-95,-24,-20,-47,1,-53,-33,-8,63,60,-23,55,32,-3,28, -6,38,50,9,-52,20,-1,-59,82,-16,-27,127,-100,44,-12,0,-28,20,-23,-20,15,-33,-45,7,-12,-88,31,69,-40,40,78,42, 
  /* [11][0][][] */ 7,-28,-15,6,12,-22,-37,-29,-9,-1,1,37,-20,-30,-37,-23,9,-43,-10,-20,-5,18,-31,21,-15,-22,-50,-32,-46,-32,15,-22, -6,-36,-20,0,-36,-34,3,-6,1,-49,32,4,-19,-30,4,-7,33,-127,28,-22,45,20,14,-5,-36,-59,-16,3,36,29,26,29, 38,1,45,4,13,-70,-1,64,-3,-14,20,39,-61,-10,13,27,40,-18,30,-18,46,44,-14,-15,60,-42,1,17,-14,16,-13,18, 
  /* [12][0][][] */ -51,-58,-23,21,-4,25,50,72,-55,18,27,-1,-3,18,-4,9,-35,35,3,105,-52,51,77,28,-70,48,-66,-110,69,-65,15,39, -56,-89,-8,45,-41,-127,103,-31,43,-35,-107,26,-64,-44,-77,18,-35,-77,25,50,-99,-73,20,-49,40,-110,-54,25,-103,-53,-16,-14, -90,-19,-14,-74,6,-65,8,-71,16,-77,-21,111,-79,2,-104,-29,-36,-47,-7,-68,-38,-44,-60,-53,-76,-69,-82,53,-26,-32,-9,31, 
  /* [13][0][][] */ -40,-19,-37,41,2,-30,-54,-7,17,32,-74,-5,-59,26,56,-6,-119,31,-44,15,23,-14,19,11,-26,-112,3,-40,-61,9,47,6, -19,-8,-26,-1,11,25,26,1,56,-41,51,65,120,0,19,-59,24,-31,-3,-30,34,3,2,28,28,39,33,-2,76,30,-51,-4, -51,-49,-2,-2,15,32,6,-32,-90,28,-88,49,-94,-51,-9,-58,-36,-37,-23,-42,-52,-90,-127,-80,-35,-26,-77,-94,-23,-49,29,-20, 
  /* [14][0][][] */ 15,-34,22,-43,-9,44,-2,-30,36,33,22,-9,113,-8,47,-31,-1,4,-19,-12,18,-41,58,14,-48,-5,36,-62,41,28,43,19, -63,-40,-20,-40,-22,29,-20,-58,-91,-61,0,-108,-26,-11,-10,-2,-33,-105,-27,-29,-124,31,-28,-43,-59,-29,-127,-4,-95,9,-19,-1, 20,18,19,-28,-11,-39,-22,-53,16,-33,-8,-17,11,-49,28,-29,8,-35,6,-18,45,30,-16,-16,-33,34,38,-34,28,4,-57,-13, 
  /* [15][0][][] */ -5,83,-25,22,-14,24,-112,-51,-35,8,48,-78,-127,-17,-67,32,-97,18,-55,-50,-65,-23,-45,-23,4,-31,-53,-49,14,3,31,-36, 47,51,-21,-4,9,29,-67,-69,-31,-5,5,-41,11,9,-45,-16,-46,-47,-80,3,57,3,-20,20,2,7,-12,-24,42,-19,-5,-21, 28,29,10,22,30,31,-55,-55,16,-14,22,-29,-26,66,-40,-37,-107,-101,36,33,-12,-46,-11,10,-5,57,11,-1,19,-7,11,28, 
  /* [16][0][][] */ 11,41,8,11,-36,54,-106,12,10,-44,-53,39,-55,-4,-72,6,7,-49,-73,-65,-44,-36,-22,-27,69,-14,-78,11,-16,12,-14,41, -15,38,-12,-31,11,26,-26,-56,-5,-46,8,22,-89,26,-44,7,-22,-45,-61,27,-59,-19,-61,-21,-6,-5,-11,-9,-6,-6,-22,-6, 127,12,14,24,11,80,22,-23,9,-24,-49,37,-35,23,7,-21,15,9,5,28,30,-5,-6,13,38,60,24,69,11,0,61,-38, 
  /* [17][0][][] */ 46,-52,-1,-45,-1,25,23,17,49,-110,-33,18,61,-40,-7,-55,45,-62,-84,13,-29,-2,-49,-30,32,61,27,-17,127,-29,82,22, 66,-37,-39,-46,-7,36,2,-95,-73,57,39,-57,-2,-20,-95,-20,22,-60,-45,-40,-61,-46,-39,-120,-37,98,-33,-102,102,-95,-12,15, -63,-57,-7,-24,1,11,-42,-58,-95,4,-12,-32,-10,-16,-94,-49,-33,-56,-34,-34,-72,-82,-105,-40,-58,-33,-62,-83,-125,-33,-91,-47, 
  /* [18][0][][] */ 18,-77,-25,-32,7,-13,-27,-71,13,0,-13,35,-60,48,20,-43,-32,36,-26,17,26,-15,28,8,-39,-22,-60,-4,6,-23,27,-7, -7,-64,23,-28,4,16,0,34,20,13,-66,-2,3,69,19,0,-35,-48,38,-26,-10,23,8,0,-73,85,13,-47,40,-16,-26,39, -49,-34,-36,13,-23,-127,-4,-6,-19,49,3,45,-43,-14,-31,2,-62,9,14,-47,-11,-3,-20,-52,-3,-68,-55,24,-7,-12,-46,-6, 
  /* [19][0][][] */ -79,51,-3,32,-20,-52,-40,-32,7,-17,-12,42,-63,-41,16,-6,-7,-65,-36,-57,39,-35,-65,-4,-24,-32,4,-49,-46,12,2,-13, 35,0,-15,15,7,88,-44,-49,-1,-20,7,127,21,24,26,-32,15,-13,-44,46,24,-5,-43,17,-19,125,34,37,50,28,29,36, -38,-60,-32,-5,0,-20,-7,-44,-59,-78,22,11,-11,46,-26,-3,30,7,-9,45,-47,-8,-57,-18,12,30,-27,-36,-41,35,1,41, 
  /* [20][0][][] */ 25,-67,-11,-8,5,-57,72,2,-45,11,51,-19,-72,1,11,-23,73,-70,-6,-74,-14,-21,17,-3,-18,-30,-48,-55,-70,6,-76,6, -14,-108,8,29,28,-31,71,-2,-40,4,12,37,68,-8,19,-15,42,3,52,-37,39,26,43,38,-17,-12,-33,-101,-50,35,11,-127, -64,-54,-23,88,17,-101,-77,-5,22,-30,49,-20,-62,-39,48,-28,-15,-85,51,-46,91,39,24,2,82,-109,-34,-32,-69,29,-4,17, 
  /* [21][0][][] */ -2,-59,-41,-42,-3,-98,-5,-127,-35,14,-54,5,-49,-20,-22,27,-33,75,-31,12,56,-34,44,-43,-24,-31,-76,-22,-60,-4,56,42, -45,-110,22,78,28,32,45,67,35,53,-28,-52,1,2,29,23,-71,54,8,60,21,42,46,39,-25,15,16,-16,-47,-36,70,1, -86,-106,8,42,-5,-58,59,38,9,26,-10,-25,-102,39,-56,-24,-33,-58,80,23,57,-25,-7,-19,29,-40,-75,11,-89,-53,30,5, 
  /* [22][0][][] */ 14,22,-56,-50,2,-9,-82,-84,68,8,38,-83,32,-11,20,-24,59,60,-69,-21,-4,-4,-53,-60,32,81,-7,-26,77,-48,-17,-127, 14,-52,7,-105,-34,-58,-67,-99,-25,-26,-8,23,-37,1,-51,-61,-50,32,-55,-23,-95,-50,-68,-55,-31,22,-48,-92,-27,-35,-73,-41, 9,-61,-27,-51,-119,-109,-25,-21,-50,2,-54,-23,-80,-2,-37,-76,-20,17,-14,-58,-24,23,-92,-41,-15,-11,-66,-46,18,-9,37,5, 
  /* [23][0][][] */ 14,-65,-115,-8,-2,16,-38,-116,-34,0,-64,60,24,0,-93,-2,11,-29,-80,-31,-7,-41,-9,-23,-40,46,-69,-103,-22,-8,-52,-122, -74,48,-30,23,17,-86,-41,-17,20,-8,-77,-2,-56,18,38,-37,-16,-10,-19,1,-12,40,-21,31,44,-79,3,-5,-39,3,-49,62, 45,-67,-7,-67,-52,18,-18,-51,15,-47,-78,-102,49,31,105,-33,53,36,-40,28,6,-10,3,38,-28,90,9,-91,127,-20,23,-3, 
  /* [24][0][][] */ -70,-35,-12,-64,24,31,-19,-37,-34,-31,40,-58,-82,-53,-48,-29,-56,-78,5,-9,26,-61,-3,-50,-23,-14,2,-32,-33,-44,-38,-13, -6,71,-33,12,-20,-13,-83,-57,-32,15,92,10,-98,16,-22,-38,19,-18,-70,9,39,4,7,-32,1,-32,-53,-17,32,-6,21,-24, 30,50,14,4,11,103,-127,-59,-47,18,67,101,7,-2,9,-16,72,-48,-67,77,-16,-20,-5,-32,57,-14,-13,-5,0,14,18,-15, 
  /* [25][0][][] */ -30,-55,-43,-13,34,-80,-16,-37,-27,24,-5,-42,-35,-24,-32,-8,-14,7,-11,-4,-32,-66,-91,-32,-76,-127,-47,-59,-21,-26,12,-17, 2,-67,32,37,-3,-2,5,43,-75,65,-76,84,-22,17,1,-5,-40,41,31,8,17,22,37,17,-73,43,-74,-33,21,-74,-1,-11, -60,-17,-38,57,-2,-116,32,84,23,21,5,71,-94,-33,-53,8,9,-56,-11,-8,-49,41,-59,17,59,-105,-58,69,-25,-40,25,-7, 
  /* [26][0][][] */ 89,8,-14,-41,16,23,-71,-8,32,5,26,85,-9,-11,53,2,17,-22,-48,41,2,7,27,-25,-19,127,38,-47,94,22,-6,2, -42,-14,16,-42,25,-80,-59,7,-61,-52,-13,-49,15,-14,-25,-30,-22,-113,-11,53,-29,-12,-23,-37,-28,28,-70,-39,-38,-15,-44,-41, -38,44,16,13,-27,-68,-56,-36,-56,-11,-38,22,-50,-14,-78,-4,-13,-55,-14,-32,-6,-12,-55,-95,-6,-35,-47,-20,6,-31,-8,-33, 
  /* [27][0][][] */ 59,18,9,8,-54,-113,-56,-41,1,-15,-57,78,42,-9,77,-19,60,-4,-24,-12,37,9,81,7,-52,74,9,-98,-1,39,-37,51, -107,-80,26,11,-36,-116,9,13,-4,-102,-3,-37,-33,4,55,-42,-75,-10,19,-38,39,-20,35,16,-45,-14,-4,-122,14,25,-18,127, 46,44,-4,-29,13,-22,-26,-85,-52,-5,-55,-17,28,0,77,-8,2,-52,-11,8,-39,-54,69,-13,-69,82,49,-117,45,25,-19,-30, 
  /* [28][0][][] */ -38,-2,-23,5,-26,38,-44,-14,17,-14,14,37,18,-16,3,-12,-10,-28,-39,21,35,-33,45,45,-34,50,31,-118,14,29,-13,-31, -66,-17,-14,-39,-13,6,-32,-31,-26,-8,6,-15,52,37,-2,-19,-1,-127,-34,-10,-61,-51,20,3,-12,55,-93,-65,22,-47,-33,-21, -41,14,-8,-53,38,-14,-15,-33,-74,65,33,39,17,24,-23,-12,8,-40,-22,20,16,-27,25,-7,-10,25,-58,-37,19,10,16,15, 
  /* [29][0][][] */ 11,-16,-9,-53,-47,35,-30,-65,-13,3,-38,-28,1,24,-1,26,-56,-72,6,8,16,-21,-29,3,-4,-48,-1,10,15,22,57,-6, -44,11,-32,2,-2,-75,-57,-46,-12,24,127,21,-10,-10,-20,-14,69,-55,6,43,-33,18,-5,-35,-14,-8,1,28,2,10,-1,3, -46,-21,1,-11,37,-17,-8,-6,-37,-8,6,20,-17,-25,-33,-3,2,-12,-8,0,-25,1,-22,-26,-11,-19,24,-5,-43,19,23,-10, 
  /* [30][0][][] */ -28,-127,-4,-32,-36,-70,-1,-29,-16,-50,56,-8,-29,-70,-27,-34,-87,-63,-31,26,-19,-33,16,-54,0,25,-41,-52,40,-33,-50,40, -33,-125,-20,40,-7,33,49,16,68,5,-68,4,18,-15,36,-8,-31,11,44,12,25,13,24,50,-26,-30,22,2,80,-28,6,30, 29,-67,16,20,-9,-11,-23,1,23,13,15,-45,108,20,-11,-9,16,-90,30,1,11,22,65,10,40,47,31,-40,65,-22,-1,-18, 
  /* [31][0][][] */ -57,35,-40,11,-8,-28,-44,-25,-44,27,21,2,-57,-5,-73,-19,16,-11,-6,-19,-14,21,2,-35,-36,-59,-94,-72,-26,10,-55,-86, -59,-63,-35,-4,-3,30,14,10,39,-17,7,1,21,-36,41,-40,-1,-53,9,16,49,-11,20,-8,-32,53,24,-6,4,12,24,42, 70,-15,7,-83,-8,127,68,-52,-18,0,114,7,20,41,62,-19,-6,-69,-14,59,26,-13,26,-11,-79,30,65,-67,33,79,24,-48, 
  /* [32][0][][] */ 59,-59,-12,-29,-5,-54,-14,24,30,-36,-51,-31,-36,-18,-16,-40,32,-10,5,56,-15,-61,-10,13,15,-25,23,-96,35,4,1,21, -62,-111,-6,9,-2,-18,8,88,50,11,25,24,13,-8,27,-13,-21,73,-6,23,-39,26,41,16,-70,-24,-16,21,-30,-21,66,20, -15,1,-25,30,-53,4,24,54,28,40,-41,-24,-119,64,-76,-27,-69,-21,4,25,12,15,-79,-41,7,-127,0,28,-39,-20,29,-37, 
  /* [33][0][][] */ -25,116,-33,10,-10,44,-59,-53,-106,-31,18,8,-40,15,-6,-66,-57,12,-51,2,-44,-33,2,-37,-57,123,-59,-3,47,-24,118,-36, -9,-44,29,-106,-82,-30,-32,-113,-18,-9,-1,-127,-54,7,-32,26,-93,-26,-66,-1,-31,-86,-14,-11,-25,5,-49,-17,-45,-47,19,26, 12,31,-1,-12,-19,84,17,-28,-68,2,4,-78,-24,3,-8,6,-79,-5,8,31,-5,-65,-11,7,7,-48,22,12,-71,-34,-19,-45, 
  /* [34][0][][] */ 35,-92,7,59,13,40,-6,9,13,43,-15,-93,63,32,16,-16,-6,36,-22,-4,14,-66,46,6,-43,7,49,-65,-58,51,14,-36, -19,-81,2,-3,-10,23,29,38,-88,35,1,-52,-70,3,-20,-43,14,-66,79,-74,-118,10,-30,21,9,6,-49,-94,10,-17,-31,25, -70,29,50,70,85,-127,-8,27,16,31,-19,-82,-67,48,-23,4,22,-123,-51,-92,-20,25,-8,15,-6,-65,-1,-29,12,5,49,-63, 
  /* [35][0][][] */ -36,-46,-22,-46,-31,-56,-4,-71,52,-9,-51,1,-70,-9,-54,-20,-34,-66,-43,-31,-69,-31,-94,-18,-12,-55,2,88,-37,2,-15,32, -16,59,-29,-90,6,8,-40,-24,-34,-96,3,27,-34,83,-55,-49,-27,33,27,25,-44,9,-64,-53,-25,-36,-27,-64,-22,-21,22,-16, -22,23,-11,-7,-22,-9,-1,-2,-7,33,33,14,79,-19,60,22,10,127,-45,48,16,20,51,3,42,9,61,-40,-66,17,-57,10, 
  /* [36][0][][] */ 0,69,-48,-79,-29,39,-105,-30,-50,30,-2,-26,-51,-17,-54,-9,-38,17,-34,-58,-114,-24,-127,-93,2,-68,-43,47,-26,43,38,18, -54,62,-10,19,-10,-36,7,-18,13,32,-43,-16,13,52,-16,-7,-4,47,8,27,-31,31,0,-3,28,30,34,25,-64,9,-71,22, -25,35,27,-26,14,-4,-22,42,-70,0,48,12,67,-31,-23,-15,-62,68,1,7,-8,-6,15,6,-27,-2,72,-76,8,-16,-3,7, 
  /* [37][0][][] */ 0,-110,-4,-68,-52,-41,17,-25,-61,6,6,57,-66,10,1,-33,-3,56,0,52,30,-41,-18,-15,-86,-51,-14,-84,-65,-14,-19,-16, -126,-74,-7,16,28,82,5,57,-51,-3,-40,-1,-13,19,-7,-24,-99,27,-37,-42,61,-29,36,8,-127,-6,-61,-63,-61,-51,-7,-39, 3,-88,10,24,6,62,-31,1,68,8,-85,90,-94,-48,-27,28,-50,-60,-16,59,-52,-1,-63,-71,24,-50,-52,88,4,-3,-15,29, 
  /* [38][0][][] */ -47,-56,-32,7,20,22,29,-60,-51,3,-7,60,-33,31,-66,7,-57,-34,28,-21,44,-22,-66,-46,-62,36,25,15,-17,24,53,-14, -29,-43,20,-70,-17,15,-22,24,-71,-49,5,-28,-35,31,-13,-72,-42,3,-2,3,27,12,-75,-67,-9,-18,-25,17,-63,-51,-53,-51, 40,8,-8,-32,-31,-43,42,-61,-60,-29,-28,37,-18,27,-3,14,-11,-21,-9,-13,29,-66,-127,28,-61,-3,-54,-24,-28,27,23,22, 
  /* [39][0][][] */ -42,-41,-10,-62,20,19,52,-45,89,-11,-20,-39,29,37,76,-11,80,-28,-21,-9,45,10,10,58,58,61,35,-127,95,14,-9,-35, -13,30,-34,-7,-12,-55,0,-7,8,-31,18,27,-16,24,12,-39,8,54,-47,-22,-9,-45,12,2,7,2,-25,-115,-32,-8,35,3, 21,-49,-33,-77,37,-84,-7,-16,-44,18,-31,49,1,65,7,-14,117,-14,-3,-9,-40,51,38,16,-43,-54,-50,-94,-8,-11,39,28, 
  /* [40][0][][] */ -23,79,-26,64,-5,-24,-127,29,-11,-17,19,42,-37,-49,-33,-61,-52,20,-110,-5,81,-31,-9,-59,29,-82,-3,-74,34,-51,-43,14, -11,-83,13,16,-27,29,-93,-27,-43,-84,-3,-30,-83,23,-82,8,-10,-113,-80,22,-7,-94,-14,-26,15,-33,-31,-11,32,-42,-36,6, 38,12,25,62,-27,72,-9,21,42,-26,-6,63,-96,81,9,10,-56,-99,-29,11,44,-12,-39,-42,-31,69,-6,23,58,1,105,-30, 
  /* [41][0][][] */ 21,-26,-37,40,-16,-42,-18,31,10,-3,31,-29,-115,-39,6,-47,-43,10,-43,-11,47,41,-33,-18,16,3,-53,-52,61,-36,0,29, -7,-58,-36,14,-40,64,36,-13,28,-15,20,34,91,49,8,-22,-19,-96,-33,-30,0,-55,-1,-17,-34,120,-18,-64,127,-42,8,-15, 23,-46,-17,-69,-33,3,-25,7,-35,-56,-20,-61,21,21,-26,-59,49,7,38,39,-74,19,5,50,-68,13,48,-56,28,52,100,37, 
  /* [42][0][][] */ -64,-127,6,14,21,-5,16,29,-28,3,59,56,18,-21,13,-1,-22,17,29,34,42,4,-6,-4,-40,-85,-76,-30,-56,-33,2,40, 11,-77,-31,-6,-7,-19,15,-16,22,-42,9,-54,-26,-6,-41,-22,5,7,-11,-5,24,-41,-12,-1,-18,-94,-41,-2,-1,-23,23,-6, 61,3,40,13,26,17,19,30,64,15,32,112,-26,1,13,11,16,-19,60,-5,25,77,38,-1,3,18,47,36,-14,-8,-11,20, 
  /* [43][0][][] */ 8,-25,-17,-17,9,31,12,5,9,-16,-9,-15,34,-15,34,-17,-2,43,27,9,-1,15,60,-33,-31,46,-20,-47,66,14,30,-41, -12,-49,-10,28,-33,60,24,43,10,34,47,30,-94,-7,14,15,29,-37,66,-16,-21,25,-23,18,13,-57,-42,-2,-52,-3,40,23, -98,-52,21,-12,-49,-127,-63,-27,-9,-33,-59,4,-50,8,-18,-9,-30,-39,-5,-59,-54,-26,-44,-33,-8,-59,-12,55,-103,-43,2,12, 
  /* [44][0][][] */ -19,-76,5,3,-24,14,-11,-16,49,-31,-6,17,7,-10,114,-20,46,-20,-7,-8,11,-7,-1,49,-26,52,58,-127,84,16,-41,8, -19,-5,-3,-11,4,-85,-16,9,-6,-3,-46,-24,38,-45,-28,10,22,-41,-56,-21,-27,-23,31,-52,-58,43,-19,-93,4,-48,17,-24, -10,-33,-31,-16,8,-58,13,3,66,-59,-83,-35,-55,-35,91,-22,27,-50,14,7,23,-5,-25,31,-73,-21,-41,-77,-10,-2,1,-22, 
  /* [45][0][][] */ 32,42,11,9,-26,10,-56,18,5,-7,-13,-20,8,-20,-6,-10,24,-40,-17,-22,15,10,-31,24,14,29,22,-35,43,14,-14,-3, -9,-34,2,4,10,-38,-8,-16,-23,17,63,72,-73,7,6,-7,19,20,25,-16,-35,-17,-27,-7,3,-35,-14,-30,-2,-14,10,3, 12,-12,-10,-15,-5,54,-22,-23,12,25,-56,-23,-127,0,15,11,-11,15,4,-13,-18,23,-28,-13,-22,-63,-9,1,-2,-11,75,-30, 
  /* [46][0][][] */ -119,-92,-10,-20,-34,11,36,-27,-32,-22,6,-12,-35,-34,28,-15,-44,-82,-17,-59,-94,-28,31,68,-6,-64,-21,-7,-91,-21,-29,8, 31,-110,-31,-27,2,12,45,-8,-51,12,-42,-26,-5,-37,25,-33,-37,-27,16,-47,-38,-8,6,14,-55,16,8,-19,-21,-47,-17,9, 26,64,-22,74,6,84,-10,77,40,-11,127,10,-11,44,10,26,38,-4,11,-21,-17,42,31,-3,53,-20,31,33,-8,37,-2,27, 
  /* [47][0][][] */ 77,-12,-37,-76,13,-47,-35,-27,47,-21,-107,101,-108,5,-53,40,-64,15,-22,-1,-85,24,-123,-34,-57,-81,27,127,-65,35,6,0, -111,72,-25,-69,77,-17,-90,-22,-61,-30,10,125,19,-89,-114,-62,-21,81,5,66,-32,-40,-104,-127,-68,-84,-53,-66,49,-14,-16,-7, -17,-27,-5,-44,-2,-6,-63,-70,-32,-52,43,38,104,-1,-15,-91,-81,85,-75,36,49,-105,34,-7,-24,33,27,-125,-52,-10,-35,-37, 
  /* [48][0][][] */ 39,-55,46,-5,-34,-15,29,-64,-23,-22,97,41,-67,-25,70,-27,127,-11,26,-8,-47,8,-2,39,32,-37,25,17,-29,46,4,-27, -48,-92,-16,23,18,-44,25,34,-88,16,-20,21,1,44,36,15,-107,17,47,-35,63,-1,-7,-18,-76,-3,-49,-25,21,-24,33,-73, -44,-36,0,40,-41,-81,69,99,72,13,-45,-29,-49,-45,-49,6,-20,-46,2,-29,77,-10,-47,3,40,-12,2,14,-86,-54,-65,-11, 
  /* [49][0][][] */ -3,-69,-53,-43,9,-36,-86,-21,-59,-32,11,64,-52,-14,-48,-17,9,-8,-47,28,-61,-17,-62,-28,-28,-18,-30,-55,-13,-12,2,-22, -21,-95,-18,-10,-6,-16,-28,-20,-53,-7,-32,-57,-26,68,-9,-14,-8,1,-24,-13,15,-12,12,0,-12,127,-50,-12,-23,-68,2,18, -28,16,18,20,-15,-26,19,65,32,12,-21,16,-40,7,-36,41,17,-5,-10,-1,-46,11,-9,-20,41,-59,-48,44,-11,-22,-65,4, 
  /* [50][0][][] */ 122,-67,-20,-69,8,8,-32,-31,0,-24,12,-1,6,12,38,35,23,-22,-91,107,32,15,29,31,-12,-33,55,-29,23,50,99,31, -15,-36,-24,-47,-16,-77,-127,-77,-48,10,90,68,-30,-3,-59,-57,-7,-73,89,4,-102,18,-3,-54,-64,95,-28,-46,73,-59,-2,14, -29,65,-19,-9,-36,-117,-53,-52,-71,-42,-41,-21,-51,-62,11,-28,-13,-100,-17,33,19,-38,-6,-21,-75,-12,-19,-89,-21,23,30,15, 
  /* [51][0][][] */ -69,-127,26,-30,-20,-114,53,53,-18,-33,46,61,-8,-33,2,19,-39,41,21,10,-41,-12,39,16,-9,-18,-75,-12,17,-44,-6,-6, -32,-64,24,41,-21,-32,-83,-26,14,2,1,-47,-103,-11,26,4,-48,-14,33,56,41,20,50,-34,-1,-25,-75,7,-9,13,33,-9, -27,-4,50,11,10,23,13,-20,36,-18,-42,-86,-89,30,-24,15,-37,-44,12,-18,-40,-12,-49,5,-21,3,-18,18,6,31,66,8, 
  /* [52][0][][] */ 59,-58,-12,19,-17,2,-15,-20,-47,-83,1,-4,62,-17,10,-48,15,-52,-54,22,-6,-42,-1,-13,-60,-33,36,-52,-26,1,16,5, 7,-76,-54,-95,-26,26,-43,-37,-1,33,35,-40,-43,-21,-73,-22,-56,10,-51,-8,-63,-55,-54,-2,-72,49,-29,-66,35,-25,-40,-15, -39,-127,18,-100,-43,36,18,26,-19,-4,75,-24,6,-28,-51,-48,-12,-21,96,3,-74,-69,-19,3,-21,-12,-36,-52,-103,-68,-40,4, 
  /* [53][0][][] */ -19,70,1,14,-18,17,-29,-12,3,15,-1,38,-38,27,-63,-42,1,-15,-21,16,13,-8,-54,-8,-22,-12,-14,-67,-33,-31,-5,76, -37,-26,-13,-29,-29,29,-15,-19,-15,-54,12,-32,-71,-10,37,-38,-51,-20,-17,7,13,-16,-73,-22,-59,39,-32,-27,30,-17,7,3, -1,-53,-12,10,-48,127,-54,-14,-30,-24,-18,-11,-50,8,27,7,1,-8,-30,21,-31,-53,-45,-62,12,58,-31,9,39,11,38,-23, 
  /* [54][0][][] */ 15,-56,-19,39,-50,52,-67,-2,106,-53,15,-31,18,-3,43,-70,29,-51,-80,45,-6,-17,-9,17,-53,114,61,-55,42,-13,-7,18, 33,-61,10,-82,11,7,-74,-10,62,-8,-41,-35,52,17,18,-24,48,-13,-105,-7,-26,23,28,-22,-48,88,20,-93,40,20,7,-46, -98,-58,27,16,-19,-4,64,37,-53,17,-26,56,-111,-38,54,-92,-27,-112,7,-35,19,-54,-26,-3,-127,-103,-20,-71,-57,-10,-38,26, 
  /* [55][0][][] */ -13,-29,16,19,20,53,11,20,-8,2,12,15,4,21,4,38,-16,16,30,2,16,18,30,-6,-15,-20,-6,-41,19,-15,32,-4, -29,-47,8,19,-19,10,-4,10,31,28,10,-16,-12,25,5,3,37,-51,-1,44,17,-2,16,5,45,-6,-9,12,-9,-8,4,-15, -50,-32,14,-25,-26,-127,9,-24,4,5,-33,-53,-49,-31,-46,-4,-33,-29,11,-26,-21,2,-48,-41,-26,-62,-37,0,-20,-30,-29,-1, 
  /* [56][0][][] */ -96,20,17,4,3,-127,-24,-70,-10,14,-24,-1,15,-17,-54,8,-14,6,-56,-36,-8,15,-19,1,-19,-79,-62,-7,-25,1,32,-15, -26,-27,13,-11,-15,14,-20,7,19,-23,-7,-2,-8,16,18,-9,-51,-54,-22,31,27,18,-23,15,15,-9,36,-11,-14,16,-18,-5, -24,-33,-24,-53,-2,-38,-24,-3,-51,7,120,-34,20,-1,45,-24,-17,-26,-14,10,19,-29,49,-6,-48,-51,39,-22,-87,29,-56,-12, 
  /* [57][0][][] */ 43,-31,-63,1,-48,41,-46,-127,-37,22,51,-15,-34,34,-14,23,-43,-14,-38,14,-27,-48,-68,-65,-28,40,-19,-50,30,24,-45,9, -5,-2,-54,-44,-48,16,8,-91,25,-59,35,15,-81,35,44,13,-54,-12,-18,-14,-12,-45,-41,51,19,-31,-87,34,-108,-18,32,-39, -42,-6,-39,-21,24,-40,31,24,93,-50,-40,112,13,-73,88,-58,29,-9,15,-5,35,-2,-37,86,8,62,50,23,114,29,-75,11, 
  /* [58][0][][] */ 42,64,13,13,27,20,-74,3,39,36,4,-19,-73,-2,-54,-9,-21,49,-52,-52,-9,44,-32,-5,34,-42,-33,43,-73,29,24,-40, -88,-31,-11,-33,-1,-127,-26,-38,-56,-43,-34,14,-16,-2,-77,-28,-19,8,-18,-26,15,-19,-24,-53,-23,-46,-49,-10,-52,-24,-36,72, -33,-22,21,-21,13,-38,35,-65,21,-39,-37,-5,71,28,44,-12,-3,26,-23,36,-2,-8,-13,39,-15,27,48,-4,-53,-35,8,-1, 
  /* [59][0][][] */ -3,-60,-34,-12,-85,1,-28,-52,-55,-37,21,-19,-102,-1,-48,-21,-27,-60,-7,27,-50,-79,-10,-5,16,25,-110,-85,-22,-10,-46,2, 127,-9,3,21,-10,82,4,-52,2,-49,-3,26,20,-31,31,7,-9,-86,-56,5,33,-60,-20,43,-28,-29,33,-2,110,16,63,31, 50,-17,44,6,-51,55,13,-23,47,-20,50,-26,-1,-35,7,-44,45,-28,-10,63,27,-53,-14,40,-14,40,-41,-31,84,-43,35,21, 
  /* [60][0][][] */ -41,26,-76,2,-67,-39,38,-24,22,7,-21,-27,-84,-19,9,-83,-30,-127,-84,48,12,-62,-43,-39,36,44,-30,-57,-50,12,-10,-18, -4,-36,-32,-3,1,-73,-17,-55,-34,-49,-18,-15,-12,-58,-39,-72,18,-16,-2,-33,32,-51,-80,-64,-27,32,-25,-16,14,-8,9,9, -53,-45,-37,-42,-71,-49,43,-40,-33,-3,-69,-22,-22,6,-101,-21,0,39,10,-11,-4,-50,-53,-85,-32,42,-85,1,29,20,-46,-21, 
  /* [61][0][][] */ -4,-53,-27,9,1,-34,-8,-30,-35,-34,-48,27,26,-41,-20,-21,-31,-2,39,-30,-22,17,2,-22,27,-26,-38,-127,-10,-27,-9,-1, -33,6,2,4,14,-1,-12,-10,45,-7,-5,-29,31,31,14,8,-10,-19,-23,-18,-11,8,-61,16,-7,-51,19,-85,-3,16,-22,26, -7,14,-12,-60,-36,20,-6,-30,11,-27,-23,19,58,41,-29,-9,-35,-72,-12,-10,-7,3,-47,-30,-5,57,-5,-89,33,-19,-23,-21, 
  /* [62][0][][] */ 47,-113,1,-49,-5,9,45,38,6,37,-47,-70,-46,39,67,34,-67,8,80,54,-34,54,34,8,-83,-72,13,33,-7,36,61,21, -61,-67,39,50,-67,-45,12,-74,10,-5,0,69,64,-66,0,-36,54,-26,-61,33,-27,-35,-16,-29,45,19,-49,-24,-6,-32,-80,27, -22,-4,31,-14,-47,-27,56,40,61,71,31,-19,-28,-35,71,-20,-16,-43,-7,-51,-2,-36,-127,19,21,30,16,66,-22,-19,-36,5, 
  /* [63][0][][] */ 27,12,19,-32,-29,-71,12,-82,-28,-40,-25,-42,-49,7,18,-3,-39,10,-22,24,-11,28,-13,10,-36,-14,1,28,-61,-16,-32,-9, -56,-37,-23,-18,2,52,8,-64,-73,-26,-48,-16,-21,-29,-87,1,2,2,-1,-5,-67,-31,-3,-4,-36,3,-15,40,80,-22,-36,22, -46,-62,-15,-23,-28,21,19,-22,-18,-48,-127,-55,-32,-14,-61,-36,-85,12,-32,12,-85,10,-30,-29,6,-39,-103,6,-17,27,-9,-9, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant11_scale = { 64, { 0.0040495246648788452, 0.0029914884362369776, 0.003305019112303853, 0.0026748725213110447, 0.0031900068279355764, 0.0066707851365208626, 0.0032138510141521692, 0.0034520768094807863, 0.0033695497550070286, 0.003632429288700223, 0.0033771251328289509, 0.0043286727741360664, 0.0036146228667348623, 0.004297502338886261, 0.0036763227544724941, 0.003603924298658967, 0.0045879841782152653, 0.00357798021286726, 0.004496338777244091, 0.0040534990839660168, 0.0037732492201030254, 0.0032950921449810266, 0.0039593991823494434, 0.0035575872752815485, 0.0041175629012286663, 0.003993018064647913, 0.0033569065853953362, 0.0033515221439301968, 0.0047963671386241913, 0.0050154468044638634, 0.0038344240747392178, 0.0048289042897522449, 0.0038743452169001102, 0.0036913005169481039, 0.0034449493978172541, 0.0043188645504415035, 0.0044022295624017715, 0.0041444869711995125, 0.0025522185023874044, 0.0043718144297599792, 0.003255041316151619, 0.0029329319950193167, 0.0053297132253646851, 0.0050152232870459557, 0.0046961908228695393, 0.004922118503600359, 0.0042726779356598854, 0.0032185208983719349, 0.0035393929574638605, 0.0051684179343283176, 0.003728868905454874, 0.0035834228619933128, 0.004251877311617136, 0.006009755190461874, 0.0031217252835631371, 0.0072067710570991039, 0.0057143117301166058, 0.0032727839425206184, 0.0048567247577011585, 0.0038547066505998373, 0.0030053961090743542, 0.0046543455682694912, 0.003009747713804245, 0.004187384620308876, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[32] = { -550, 718, -1368, -1540, -184, -655, -1440, -1232, -2308, -871, 916, -667, -877, -447, -2322, -1262, -1797, 778, -1356, 415, -1674, -3978, -1410, -4327, -1061, -1387, -333, 704, -1634, -939, -1078, -1477, };
const TfArray<1, int> tensor_dimension12 = { 1, { 32 } };
const TfArray<32, float> quant12_scale = { 32, { 0.00022225662542041391, 0.00040828544297255576, 0.00018056639237329364, 0.00018686095427256078, 0.00013702460273634642, 0.00018720160005614161, 0.00029661369626410306, 0.00030519941356033087, 0.00021946868218947202, 0.00023515777138527483, 0.00016841304022818804, 0.00018305935373064131, 0.00016854263958521187, 0.00013692888023797423, 0.00020800509082619101, 0.00013313886302057654, 0.00013068172847852111, 0.00030042731668800116, 0.00028802274027839303, 0.00014991426724009216, 0.00023903892724774778, 0.00013396296708378941, 0.00025837257271632552, 9.4290633569471538e-05, 0.00024786041467450559, 0.00024684681557118893, 0.00030339974910020828, 0.00030554720433428884, 0.00019319870625622571, 0.00013544777175411582, 0.00018644343072082847, 0.0001406495866831392, } };
const TfArray<32, int> quant12_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[32*1*3*16] = { 
  /* [0][0][][] */ 8,72,82,-11,20,-12,-2,58,21,48,-127,31,10,38,85,-7, -31,-1,4,57,-25,14,18,42,-32,-43,-98,20,28,-12,-22,-24, 33,21,16,25,43,-52,68,35,38,-120,-7,-1,30,-27,53,-9, 
  /* [1][0][][] */ -16,-31,-24,-30,-34,-32,-7,-29,15,-21,-93,-6,-53,6,-34,18, -3,24,-11,13,11,-5,-56,-95,-17,8,27,-3,-127,-5,37,3, -25,-1,13,13,9,17,10,4,-15,-6,29,9,14,19,62,-20, 
  /* [2][0][][] */ -18,-19,-3,-28,44,15,36,6,-33,-13,-42,32,61,-43,-8,40, -15,-24,31,-70,29,38,127,-28,25,-49,-79,-59,-25,36,-16,26, 0,41,-61,-75,102,-16,-65,8,-46,-70,-27,-25,-41,37,-26,36, 
  /* [3][0][][] */ 29,-12,48,-45,29,-23,-68,-116,-16,-29,90,28,-63,28,82,-31, -2,-69,-29,-54,-20,22,-23,95,31,28,1,8,-69,-17,-36,-3, -28,-28,32,18,-21,13,44,-63,52,39,-62,-5,-60,41,-127,25, 
  /* [4][0][][] */ -15,-89,-84,-33,-79,-34,-14,29,56,25,-64,-6,-49,-13,-5,75, -5,-22,-107,-127,-33,-17,31,18,-11,-78,-50,19,-32,-54,-120,-22, -11,-69,54,-66,-14,41,8,-28,-68,17,59,53,-15,71,-81,-56, 
  /* [5][0][][] */ -4,-7,-15,-30,1,-42,98,63,-32,31,-89,16,-21,-5,127,6, -45,-104,-7,42,61,-15,2,41,23,-98,-80,-9,-9,-31,68,38, 8,-34,-125,-49,-19,-56,74,-30,-43,-78,-36,58,-31,-43,1,-22, 
  /* [6][0][][] */ 24,48,-35,-1,21,18,17,18,-11,-10,12,-33,23,23,-30,-26, 32,-37,7,-20,11,34,-12,6,19,20,-46,-32,20,-22,8,-17, -20,9,-102,-24,2,-13,-29,-127,-23,-33,-84,-26,-61,28,-95,-10, 
  /* [7][0][][] */ -1,-5,-48,-23,15,21,16,2,6,-50,44,27,7,-7,19,23, -7,28,-7,-6,-17,-6,5,13,-4,4,5,-21,-23,2,23,-19, -9,-3,-81,-20,11,-23,-13,-112,28,25,-89,29,-5,28,-127,19, 
  /* [8][0][][] */ 18,33,-2,6,-11,-3,-11,-69,-6,44,37,-32,-35,35,-27,21, -11,-30,-5,-30,-67,-9,-2,15,-3,34,-24,4,13,31,-69,-29, 27,-58,-27,40,-37,2,-59,-43,-50,-49,-127,29,-58,-15,-16,-30, 
  /* [9][0][][] */ 14,-10,-23,17,-29,-12,18,4,-3,-34,-9,-36,4,-36,-46,-12, -7,12,6,-127,-19,13,-25,6,-33,-40,-15,-23,0,-1,-16,-31, 8,0,24,-65,34,40,-20,-20,-22,-24,-14,-26,-29,-20,5,22, 
  /* [10][0][][] */ -34,-81,19,44,-6,-26,8,-26,-24,-34,-59,-20,118,-9,52,48, 50,-2,-14,23,19,-59,2,-35,30,-65,-20,39,-49,47,5,-44, -38,-100,-16,22,17,-34,8,70,20,-127,-91,10,-44,47,-53,57, 
  /* [11][0][][] */ -47,3,12,-62,-59,4,26,-49,-15,-74,-118,-105,46,14,25,12, -32,-55,22,10,-18,-43,-49,33,-20,43,-43,-33,18,4,37,-53, -23,-44,51,48,10,6,19,-9,-28,-76,-85,-4,-40,-12,127,29, 
  /* [12][0][][] */ -56,-122,-37,57,0,-53,-45,-70,31,91,13,-55,-127,-17,112,0, 29,-73,-4,-79,-68,15,23,11,-36,-70,25,-19,-66,-3,85,2, 47,50,27,9,2,-2,38,-12,-19,-79,70,28,-15,-16,42,-3, 
  /* [13][0][][] */ -3,-17,-73,-94,10,-74,-108,-109,-32,3,-5,-80,-35,-13,71,-1, -11,-85,-78,6,-72,18,25,11,8,-111,-58,-44,-9,16,69,-35, -42,-54,-3,-40,52,-127,-72,-20,-46,-4,-78,11,-26,-19,3,57, 
  /* [14][0][][] */ 17,24,-20,5,-5,17,-7,-4,44,36,33,-19,24,-13,-69,-3, 30,-18,6,21,-95,-11,-63,-41,7,13,-40,-40,-33,-18,-24,-10, -5,-40,-1,31,-16,-67,78,-11,37,-91,-93,-54,-8,31,127,4, 
  /* [15][0][][] */ 42,27,12,-81,-32,27,4,10,-51,-4,-111,1,51,19,71,-1, -13,30,-47,-39,80,59,99,-1,-15,-61,-102,56,-17,58,-127,-21, 73,106,-52,-59,14,14,23,81,60,-5,9,32,-105,59,-32,62, 
  /* [16][0][][] */ 19,0,-30,40,-3,-42,30,-79,67,26,-73,-8,117,55,17,-81, -26,-61,-15,-125,25,-12,20,-122,62,-116,-85,10,-127,-43,60,-44, -3,50,-74,-33,-21,-40,1,113,-40,-68,58,45,47,-45,-65,-61, 
  /* [17][0][][] */ 14,24,-127,-49,-14,12,17,3,-1,-32,-35,-41,0,-16,-85,-19, 21,-15,-84,-42,10,-32,-2,-50,-22,-57,14,-32,-28,-17,-81,-11, -28,12,-24,-50,13,14,-22,-9,-7,-21,57,-5,-60,-12,-58,6, 
  /* [18][0][][] */ 14,38,-53,-8,6,16,-28,29,23,-28,21,-5,32,-2,-35,19, 34,2,-5,-60,-6,4,-5,-21,5,12,8,-19,11,30,-58,25, -21,36,-51,-39,-9,-23,24,-15,18,-12,-89,2,-25,13,-127,-19, 
  /* [19][0][][] */ -52,100,-1,23,-84,27,-72,52,-17,-5,18,25,-33,-12,-54,-18, -22,-33,32,73,13,10,-55,30,0,-44,-49,-38,-70,-32,31,39, -25,-127,-18,8,44,-85,-79,10,-74,-85,-5,51,-46,42,84,-38, 
  /* [20][0][][] */ -18,-19,-26,20,-14,-30,37,-26,27,14,35,6,-15,27,82,-16, 46,-6,56,8,-11,12,-66,33,-16,20,-58,-37,-41,25,-28,42, 41,53,53,45,52,-54,-20,24,54,-56,-38,37,-32,12,127,3, 
  /* [21][0][][] */ 46,-12,-117,95,12,-47,62,-43,82,-53,31,30,17,-45,-23,-51, 0,5,3,39,37,45,-17,-59,16,-39,48,-46,21,-2,-127,-46, 11,112,34,-73,90,-68,59,3,-26,77,-107,28,1,-35,-41,-78, 
  /* [22][0][][] */ 16,-22,72,4,46,-63,16,49,-21,14,6,-27,1,1,127,26, -6,-8,61,2,43,-20,-4,18,-6,-57,24,-53,-19,-22,14,102, -27,52,53,-12,56,-28,8,39,-6,24,-6,-3,-13,8,51,63, 
  /* [23][0][][] */ 70,-53,84,70,66,61,58,2,32,38,49,16,44,-95,-13,43, 48,86,60,65,-3,12,-30,35,-74,55,-127,61,-121,67,-89,17, -18,-16,22,74,20,-106,-16,33,36,-124,-88,-105,75,-103,107,-99, 
  /* [24][0][][] */ -34,38,-2,15,-39,27,-81,-27,-19,-8,30,-11,-127,-4,-32,-12, 22,32,45,6,-53,3,-19,-28,-25,-33,-27,-14,-80,-19,47,27, 21,13,-25,-55,-23,-14,59,24,8,34,-43,-16,56,22,-69,21, 
  /* [25][0][][] */ -21,29,37,16,-56,-31,-3,-5,-12,56,6,28,15,-25,30,24, -36,-70,67,-57,-6,-7,27,-40,48,-67,-49,11,-10,-8,44,31, -16,-87,-5,-13,-23,-78,-27,-29,-20,-69,-127,14,-32,-39,-82,-38, 
  /* [26][0][][] */ -9,23,-29,-4,-47,-29,-45,-42,-8,19,16,49,-32,24,24,28, -31,-52,11,27,31,-11,38,31,11,5,-57,-6,9,-11,79,-6, -5,5,88,-51,-5,-16,63,12,20,-60,2,-39,-9,-23,127,31, 
  /* [27][0][][] */ 15,-7,-21,-80,-19,9,-59,-47,-3,19,-82,-2,-34,-26,-61,-29, 6,1,-94,-73,-5,-6,-66,-119,-19,19,-71,-9,-29,6,-6,-14, -29,15,-56,-9,-14,-8,6,-127,-7,-6,-58,-19,-24,1,-8,0, 
  /* [28][0][][] */ 16,45,-23,11,-24,-20,44,-12,36,45,-50,14,-32,-15,82,7, -7,-42,-57,-41,7,-43,1,8,-48,-127,-100,-7,-17,13,5,-51, -18,-47,-74,-47,-13,-42,-12,-24,-28,-13,-85,-55,10,-9,-51,37, 
  /* [29][0][][] */ -20,-13,22,-17,59,-31,-9,-69,-10,-30,-71,51,-12,-68,67,-13, -1,-72,49,70,-127,-86,-31,-44,24,15,-38,-47,-22,-16,83,-5, 44,-16,-5,-15,47,9,97,62,43,-94,-6,-41,-52,-61,110,44, 
  /* [30][0][][] */ -6,-27,20,-65,44,0,54,-41,-51,5,-125,-41,2,-34,106,-43, 38,6,-19,54,37,-53,6,10,35,-54,-2,-34,-37,-26,-106,-11, 35,-50,8,-8,64,-30,-35,-69,3,-41,-47,-18,-34,-3,-127,26, 
  /* [31][0][][] */ 26,-74,-31,44,-24,-32,-50,15,-54,-127,-54,14,-34,-56,86,20, -62,102,50,31,-27,-64,5,-65,-22,-83,-99,55,-62,47,-96,-25, -3,-97,-8,30,-51,-50,-7,-1,-43,46,22,-13,-21,28,-48,54, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant13_scale = { 32, { 0.0046292790211737156, 0.0085039855912327766, 0.0037609327118843794, 0.0038920389488339424, 0.0028540210332721472, 0.0038991342298686504, 0.0061780274845659733, 0.0063568553887307644, 0.0045712101273238659, 0.0048979907296597958, 0.0035077962093055248, 0.0038128572050482035, 0.0035104954149574041, 0.0028520273044705391, 0.0043324404396116734, 0.0027730867732316256, 0.0027219082694500685, 0.0062574595212936401, 0.0059990901499986649, 0.0031224938575178385, 0.0049788295291364193, 0.0027902517467737198, 0.0053815213032066822, 0.0019639353267848492, 0.0051625682972371578, 0.0051414561457931995, 0.0063193710520863533, 0.0063640992157161236, 0.0040240450762212276, 0.0028211779426783323, 0.0038833427242934704, 0.0029295242857187986, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -3738, -8513, 9088, 5572, 3945, -10733, -255, 9683, -6509, -12886, 3829, -796, 1036, -5393, 1969, -838, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 1.7676749848760664e-05, 3.7266359868226573e-05, 1.851606612035539e-05, 2.7024832888855599e-05, 2.9728107620030642e-05, 2.5962433937820606e-05, 3.8511294405907393e-05, 3.9713166188448668e-05, 1.8396145605947822e-05, 3.9062826544977725e-05, 5.954614607617259e-05, 1.8382614143774845e-05, 5.8021338190883398e-05, 1.9002800399903208e-05, 6.1181490309536457e-05, 1.8083050235873088e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*3*65] = { 
  /* [0][0][][] */ -22,-19,-127,46,-90,11,71,-115,-33,-46,18,21,35,-12,0,-115,7,39,-1,41,9,-105,-54,91,-43,77,-110,44,82,-34,-117,30,-52,62,59,-93,-93,-46,45,-89,50,70,84,-106,-72,-84,17,-88,-89,47,34,-16,2,-117,-57,-113,-28,-60,-55,49,-89,-25,93,-119,64, 14,-50,-6,31,84,81,-42,8,-36,40,18,-93,-103,68,78,-38,-104,4,74,84,70,-25,54,-67,11,-86,-76,55,-53,34,60,-68,68,-78,-59,14,6,31,-104,-96,-40,-24,67,-21,-97,-99,87,52,-17,-14,-73,85,2,67,-14,87,-8,-6,32,-103,-25,-34,47,-68,-51, -52,77,-112,-44,-43,-76,-34,4,-65,-19,-9,64,-67,75,-21,-61,-42,-48,82,-25,40,46,-21,-5,-21,-119,95,37,12,-93,80,93,86,-109,-28,94,-24,-17,-87,-33,-4,66,-13,20,70,45,83,15,67,2,-50,-65,-40,37,11,-75,-15,-121,88,40,-42,66,22,-65,98, 
  /* [1][0][][] */ -34,-37,-95,-87,-53,-57,0,6,-83,15,-8,-22,-18,-81,-46,-33,-56,-8,-63,-19,16,-62,-30,16,-15,-40,-2,-80,-18,-57,-11,-61,-94,-30,-48,-48,-39,-26,-51,-36,8,-27,-88,7,-85,-79,11,-32,-39,8,-61,-89,-5,-64,-45,-17,-25,-68,-24,-119,-83,-126,-58,-54,-69, -56,-10,-83,-85,-14,-73,19,19,-57,5,-6,18,-6,-22,-32,10,9,60,-24,69,46,52,93,-6,11,53,54,14,29,-9,0,-15,-4,-35,36,33,3,62,-5,72,70,59,56,-9,29,49,40,-14,83,30,70,-19,57,34,25,-7,47,74,-13,44,30,53,52,-49,-41, -121,-120,-44,-127,-84,-48,-18,-15,3,-26,32,29,8,40,20,35,39,-14,44,-28,39,-7,3,-6,35,49,11,8,44,-17,-49,48,44,-29,25,38,-15,1,-33,62,-32,67,-4,11,68,-51,-45,-1,20,-32,6,34,48,61,55,-22,64,34,-57,-5,-42,-74,-62,19,-39, 
  /* [2][0][][] */ 94,-105,-104,32,-74,28,33,-82,40,56,82,-21,18,-97,-27,-98,-111,84,34,-33,19,-9,-2,21,65,84,-74,81,-118,48,-8,-67,-84,-71,-109,-75,-116,-51,-122,-119,33,-88,44,85,40,-112,8,3,-104,84,33,-98,65,-16,-16,16,-18,44,-14,-78,16,-105,-66,-54,66, -32,23,-44,51,-35,-12,-94,-51,-2,-63,73,-55,20,43,-90,-51,27,70,-117,42,-56,-19,31,60,72,-15,58,-64,-22,42,-110,74,6,27,-67,23,9,-9,11,11,-12,30,-105,-58,6,-104,-26,0,-23,45,3,46,39,-37,-123,13,37,62,-115,-31,-122,-127,76,29,-50, 39,-72,-57,-17,-91,-10,-14,-82,-46,37,-12,-125,36,-122,-43,30,28,-110,-59,-56,-73,72,-34,-83,-19,73,10,-103,-97,26,-108,-13,-90,48,-119,0,-16,-23,12,64,-71,8,29,76,85,-35,55,20,-68,-126,-105,68,51,-31,-113,-57,-37,56,-23,68,-56,66,49,-79,-117, 
  /* [3][0][][] */ -86,-27,47,56,48,-32,-38,-4,37,-7,11,9,-7,2,30,-14,5,-10,-65,-119,-85,-38,-3,25,24,-101,-67,27,25,-36,1,-27,-37,18,-5,25,-17,-74,-45,15,30,27,5,-7,-78,37,-84,-80,-14,-36,-73,-62,-41,61,50,60,-8,-61,16,-32,68,33,88,-16,-3, -66,-122,3,17,-92,-115,-1,-28,-41,-127,20,-114,-100,-56,-108,-98,-113,-19,-15,-85,-104,-108,-9,-109,-34,-87,-67,14,11,-38,-70,-104,-31,-14,-13,-29,9,-83,-105,-45,-53,-61,8,-86,-10,0,-20,34,-7,-106,-93,-89,3,-28,-69,-77,-84,7,-48,35,-59,-61,32,15,-102, -71,-62,-83,-27,-96,-18,-39,-73,-50,-91,-34,-91,-14,-95,-61,-95,-37,-94,15,-3,-96,43,-13,-19,-82,-80,3,-35,-57,-78,-1,-55,-72,-62,-23,-36,41,45,-80,26,-65,17,-39,-52,-23,27,12,5,-27,43,-2,-16,-4,-15,-69,-40,-31,-71,35,-47,41,-31,42,-26,2, 
  /* [4][0][][] */ 69,-3,-51,-4,-19,-58,20,-30,-55,-47,-40,-71,-73,-33,14,-63,-73,5,-45,-43,7,21,-60,21,-17,-39,-48,-69,-68,-2,-54,12,-56,-32,-41,-95,-95,14,-62,-97,26,-100,-77,4,-58,-59,8,-100,-93,-40,-35,-46,-57,-90,-67,-4,17,-92,18,-40,-49,-86,-62,3,-99, -38,-28,-67,-68,2,30,30,-41,-38,-54,-83,-62,31,-68,-54,-30,-74,-5,9,18,-100,-54,30,-44,-60,3,-60,16,-20,-98,-58,-7,-14,-93,18,5,-49,12,10,-77,-29,-40,-1,-105,-27,-7,-107,-64,-92,-118,-38,-4,-40,-97,-59,-42,-18,-69,-13,-101,-76,-127,-64,-33,-25, 15,-95,-29,-69,-52,-87,-76,-75,-37,17,-60,23,-72,-56,46,-34,9,54,56,-16,57,3,-5,27,-16,-58,-15,14,-56,69,-32,-13,53,-12,39,20,15,10,14,-7,29,57,-44,42,38,18,-8,-26,48,-41,38,-26,12,-72,-56,-73,-43,3,-1,-2,-67,-3,-17,-50,-4, 
  /* [5][0][][] */ 9,53,91,2,27,-2,19,-16,-72,-20,-51,47,-46,-20,-87,-117,-31,11,-71,1,-122,-17,-36,-123,-109,-109,-59,-79,-49,21,11,-7,-106,-90,-25,-83,-93,-84,-15,-65,16,36,-16,-51,-3,16,-42,-65,32,-12,18,-62,-47,33,5,1,-32,-55,0,64,34,41,74,62,110, 67,34,91,102,36,38,65,-56,23,0,-10,20,-75,-54,14,-63,-50,-21,0,-88,2,-82,-93,-126,-11,4,-65,17,-18,-111,-70,-93,-109,-20,-5,-113,-127,-121,-65,-93,-59,-40,23,2,-90,33,-71,-5,-41,-13,-92,-21,-65,-104,33,-38,-80,-46,-1,-10,14,96,57,50,-6, 41,69,-44,28,0,42,-6,-57,60,-44,15,18,-1,-70,20,11,-4,46,10,0,-111,-98,40,-75,30,-20,-30,8,-75,-43,-62,52,52,-78,-58,-54,-39,52,-74,20,24,-33,48,-38,-83,48,2,-63,45,0,17,66,14,45,6,88,-18,19,19,-6,97,40,17,60,1, 
  /* [6][0][][] */ 65,-81,-74,-92,-105,-81,-84,-60,-87,-47,-74,-67,-73,-21,-53,-64,-49,-97,-102,-96,-87,-36,-95,-24,-42,-82,-114,-8,-70,-18,-72,-63,-86,-47,-81,-11,-92,-76,4,-84,-45,-80,-95,-60,-4,-76,-38,-63,11,-20,-44,-17,-30,-79,-47,-50,-34,-36,-52,-75,-37,-46,-73,-41,-53, -74,-50,-62,-98,3,-32,-11,-68,8,-55,-46,-37,-77,-62,-12,3,19,-64,11,-4,-71,-60,-17,-38,-47,-69,-22,-74,-24,-4,-37,-13,-47,-65,-37,-28,-84,-25,-69,-80,-93,-69,-52,-34,-80,-81,-57,-119,-89,-32,-93,-92,-91,-126,-101,-121,-57,-61,-34,-56,-79,-115,-30,-127,-54, 42,-67,-60,-14,-88,-57,-41,3,-41,-20,21,-44,-26,-48,3,33,47,24,42,-12,-12,56,-12,7,-31,-8,43,54,9,18,-12,-1,3,-19,-28,-6,21,4,39,17,-46,33,55,-48,7,22,38,-22,-18,5,-41,-9,38,21,-27,25,0,-21,-28,-11,-50,-37,-26,-18,-74, 
  /* [7][0][][] */ 13,-13,-4,-62,-32,17,-5,-30,-16,-28,-36,-61,0,-51,-3,-56,-8,-23,10,12,-21,-26,-54,9,5,36,4,-59,-68,-27,-21,16,9,-19,11,-39,38,44,14,-6,21,-33,-48,-40,-28,-1,-37,39,31,45,16,56,-12,42,14,21,-30,-40,-39,29,-26,40,17,30,43, -45,-100,-9,-32,-36,-107,-84,-98,-105,-120,-105,-43,-34,-48,-92,-38,-100,-67,-54,-71,-94,-103,-127,-103,-89,-77,-114,-56,-56,-33,-70,-6,-115,-50,-86,-42,-35,-73,-51,-85,-57,-93,-66,-76,-66,-18,-82,-69,-63,-116,-62,-72,-75,2,-47,-95,-74,-101,-32,-92,-85,-85,-72,-67,-41, 10,-37,-19,-27,18,31,-13,14,0,-2,6,37,-22,33,-31,43,0,-23,10,37,1,57,35,7,-1,29,3,37,-7,-27,-13,14,4,-12,20,-12,38,31,-28,17,-14,4,50,2,4,3,30,-35,-15,20,20,8,44,55,-20,27,-35,22,19,-61,-37,12,-61,-6,-22, 
  /* [8][0][][] */ -9,22,-23,-42,-34,-91,-80,30,-36,-104,-9,62,-3,-93,-99,62,-47,-23,-37,78,44,70,-51,46,-29,98,97,88,40,66,66,5,-52,-19,-51,88,-85,25,39,25,-16,-77,-100,-32,66,-93,-98,-10,-48,-66,-54,32,-79,18,-52,-93,-66,-37,83,60,-56,71,-19,8,-94, 45,-48,-109,-35,-125,-6,61,84,49,26,48,-106,-9,-82,50,-14,39,-19,-18,20,46,-46,5,-108,-70,-2,17,-42,60,-124,-84,-29,-14,-64,-92,-71,-121,-38,-127,48,70,-81,-127,-15,-81,41,-58,16,-7,76,-116,49,-31,-3,-116,77,-43,-100,74,-43,-92,-101,21,-18,34, -46,-74,-59,32,67,9,15,65,41,-54,1,-22,-71,-115,-2,17,-91,-124,-79,38,56,-48,5,-83,-75,38,-12,48,-29,40,-114,25,-110,-37,39,-125,-37,67,-92,80,-95,37,-44,82,89,72,-2,-89,43,-45,-103,-120,-42,82,56,-114,-112,-64,-76,-96,-74,-88,14,-23,85, 
  /* [9][0][][] */ -90,19,45,64,36,-24,-37,33,-14,61,-2,29,22,-14,27,-26,56,50,-13,-48,-20,5,72,30,-12,-6,-53,34,-40,-43,34,-19,-16,-41,43,9,50,3,5,-54,-22,-27,65,17,0,61,-23,27,43,-20,-1,17,60,67,-4,-18,-37,45,45,109,127,119,38,62,96, -66,-13,-4,38,30,52,34,73,30,5,-8,-6,6,44,-7,39,27,73,10,61,-5,35,54,39,-20,52,-56,-7,-12,-39,36,-23,-17,20,-29,30,13,-38,-46,-14,-41,-50,-4,-31,48,21,-14,-12,-10,13,-15,40,1,45,-28,-26,12,-14,52,49,101,82,90,74,27, -125,-85,-28,-81,-27,-28,17,-9,-47,-40,-15,46,-13,-15,41,61,-21,-10,-2,-35,86,38,8,27,-20,-7,56,1,9,29,-24,-56,-4,10,-39,-27,-41,30,-13,-50,51,-38,-17,8,32,36,-4,5,-50,-30,18,-26,40,27,-18,-48,-27,-46,18,-24,-21,-40,0,30,52, 
  /* [10][0][][] */ 127,94,55,86,60,20,-4,45,-12,7,-11,-14,-44,-61,-70,-35,-28,-70,-75,-66,-62,-66,-59,-79,-74,-60,-28,-12,-42,0,4,-25,1,-24,-50,-1,-10,-38,-6,-40,-46,-23,-22,17,-32,-27,-1,7,-38,-39,-1,-1,-42,-34,14,-7,-31,-12,43,19,64,43,64,48,55, 83,117,102,91,35,32,57,40,9,-19,5,-9,-11,-49,2,-26,-27,-41,-12,-31,-39,-53,-40,-25,-54,-29,-8,-24,-48,-2,-13,14,-30,-24,-12,-28,5,2,19,-34,-22,-23,-15,18,-7,-17,-26,-22,-38,0,8,33,35,-22,4,-9,-8,27,56,88,90,44,44,71,79, 91,88,118,58,34,84,43,27,4,8,18,-25,-20,-34,-1,-31,-43,-36,-61,-9,-52,-25,-4,-50,-52,9,-47,-8,-19,17,0,-38,8,-34,-30,-34,10,9,-8,7,-12,13,15,-14,26,-18,15,34,-8,-12,-4,11,-18,10,-10,26,37,28,26,35,77,91,79,65,36, 
  /* [11][0][][] */ -5,-104,-58,0,-117,-103,11,-24,11,2,55,71,70,-108,28,50,27,30,-20,65,-65,-75,15,-82,40,-51,-99,-97,55,16,1,73,-112,-98,-70,75,-47,-79,-104,-66,-25,-124,32,-20,-7,-104,-1,-8,-24,63,19,3,-27,-2,-106,-87,-41,-32,-127,-54,-115,26,-91,6,-33, 56,36,47,65,-51,63,84,-35,-58,100,91,-36,106,-71,-33,83,45,79,-11,-55,-12,111,64,-100,87,-56,45,17,-21,70,37,59,33,-99,40,41,-108,72,-4,102,-100,-107,-11,93,54,-14,-35,40,-92,113,-99,-54,89,36,73,56,-82,90,113,55,-4,70,96,86,-35, 48,-52,-2,-116,28,-18,-57,-107,89,-110,21,27,-15,25,-88,-122,-38,52,-69,-33,82,5,-22,23,-59,-32,15,-28,-122,-77,82,-42,-66,-101,-58,21,-7,-43,-11,-67,-101,-47,-13,-80,-8,-30,37,6,15,-31,47,43,-66,-98,-9,-92,-1,-47,-126,-57,-31,41,-86,-13,24, 
  /* [12][0][][] */ -53,-13,-28,-11,-38,-7,-13,4,-56,-52,-55,-38,-37,-19,-51,-15,-49,-56,7,-16,-28,-41,-30,-43,-34,-11,-4,-31,-17,-36,-4,-1,2,-40,-4,2,-50,-7,-11,-22,-59,-24,-33,-20,-37,7,0,-18,-53,-25,-26,-38,-57,-32,7,-54,-12,7,7,-45,-26,-4,11,-48,-3, -76,-64,-30,-46,-77,-78,-17,-37,-60,-83,-61,-51,-52,-77,-69,-41,-68,-73,-40,-66,-46,-62,-109,-48,-83,-31,-89,-33,-69,-16,-56,-71,-68,-39,-76,-78,-74,-53,-48,-77,-55,-56,-70,-95,-127,-50,-46,-113,-80,-60,-67,-85,-80,-87,-119,-85,-75,-84,-76,-111,-83,-102,-115,-109,-103, 35,22,-45,-2,33,25,-2,-14,25,21,18,38,35,52,29,3,-5,6,34,4,51,55,14,57,19,36,-11,53,34,-10,-5,45,7,-6,35,41,1,11,0,20,28,39,-8,13,-31,45,10,32,3,1,4,21,46,37,37,6,-2,15,36,-3,-5,-22,12,-13,-17, 
  /* [13][0][][] */ -14,13,-13,-15,48,74,40,-11,14,67,-29,-114,-110,32,91,80,-35,9,-64,-41,-113,52,-37,-70,-61,-87,58,-18,-26,91,-51,60,20,64,24,-23,41,-27,86,-86,-84,-10,19,-39,93,38,69,32,-56,-94,88,35,-79,61,-37,81,-107,-82,-77,93,98,-84,85,-17,-63, -114,-122,24,-119,-92,7,0,48,-90,-56,-5,-62,62,-21,93,62,-28,-40,-105,3,15,42,93,-63,-42,63,2,-108,80,22,-61,-30,63,88,-79,-42,95,-54,-1,16,56,78,29,-75,23,-6,18,13,32,99,-71,-11,4,57,56,-46,-96,-2,-90,-91,22,-78,85,-14,-58, -126,-66,46,-117,51,-73,-3,-49,-124,-83,-94,-77,41,59,-1,22,29,3,-99,-39,-28,-127,-105,-79,66,66,18,-48,9,50,8,11,-21,-61,18,-1,-57,-8,35,-51,17,-32,50,35,-52,55,-101,-32,-78,38,-62,7,55,12,12,27,-44,37,-69,43,-124,-117,27,26,-74, 
  /* [14][0][][] */ 127,-19,-36,-48,-61,-24,-39,-39,1,-31,-12,-19,-29,-24,-40,-53,-55,-15,-7,-43,-57,-28,2,-12,-16,-2,-11,-43,-53,-2,-58,-32,6,-10,-36,-2,-4,-6,-5,-39,-37,-34,-52,-39,-3,-56,-55,-56,-55,-38,-63,-34,-31,-34,-7,-32,-3,4,-50,-18,-53,-11,-45,-32,-50, 42,-6,7,-28,-24,23,-19,11,-13,18,-5,7,19,9,20,-3,-32,-34,-24,-30,-13,2,1,-27,12,28,-17,-11,-37,10,-30,-33,7,-30,-8,6,-31,-20,-14,-11,-11,5,8,-12,-18,-39,-26,-44,13,15,-9,-33,-20,16,-41,16,4,-49,1,-24,-43,1,1,-32,-18, 18,-16,-5,22,-24,-14,1,-4,14,0,25,8,-3,-43,-33,25,23,-31,11,-30,-17,-28,-28,-34,0,-34,3,-9,17,-16,27,-30,12,-21,-17,-5,-35,14,3,-30,22,-34,18,8,7,-13,-27,-17,23,-22,10,-46,7,-7,2,11,-19,-27,-21,7,19,22,-20,19,-28, 
  /* [15][0][][] */ -14,14,7,42,-76,-124,-120,6,82,-37,16,-48,-46,63,63,-84,75,-94,-47,-68,-5,-62,-97,44,6,-123,-46,-82,-64,-108,1,20,-54,41,-69,-44,19,0,21,-7,-62,-68,-63,-10,14,-24,4,49,50,-38,38,54,85,59,37,52,-57,-2,-92,7,-102,-32,-96,-25,28, 65,14,-57,-105,-78,72,-41,49,-35,68,-19,36,32,55,16,-5,42,2,-116,-96,-13,-48,-88,-79,49,65,-88,-25,14,14,-68,65,-79,82,-71,-98,76,41,-56,-115,86,-119,23,-64,-34,39,48,-49,15,-5,1,-103,-110,-63,-111,-111,49,-17,-48,-87,61,-29,-27,-84,-105, 70,21,-70,-50,-97,86,-113,-83,-5,59,-127,13,71,76,-8,-58,-13,-63,-29,-29,-79,76,-33,13,-76,19,-49,-94,-85,-21,-49,59,42,-118,-19,2,-44,-93,-74,87,-80,61,-15,53,-64,-78,-5,43,-62,7,67,-119,-25,-93,63,-29,-75,36,-89,35,-66,-12,44,16,-120, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,3,65 } };
const TfArray<16, float> quant15_scale = { 16, { 0.001405084622092545, 0.0029622181318700314, 0.0014718000311404467, 0.0021481425501406193, 0.002363019622862339, 0.0020636948756873608, 0.0030611753463745117, 0.0031567092519253492, 0.0014622677117586136, 0.0031050152610987425, 0.0047331876121461391, 0.0014611921506002545, 0.0046119843609631062, 0.0015104893827810884, 0.0048631774261593819, 0.0014373805606737733, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,39,65 } };
const TfArray<1, float> quant16_scale = { 1, { 0.012580558657646179, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,39,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.048011068254709244, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,39,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.048011068254709244, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,20,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.048011068254709244, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,20,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.048011068254709244, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,20,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.023391915485262871, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,20,1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.023391915485262871, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,10,1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.023391915485262871, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,10,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.023391915485262871, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,1,10,64 } };
const TfArray<1, float> quant25_scale = { 1, { 0.020168755203485489, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,10,1,64 } };
const TfArray<1, float> quant26_scale = { 1, { 0.020168755203485489, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,5,1,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.020168755203485489, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,320 } };
const TfArray<1, float> quant28_scale = { 1, { 0.020168755203485489, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,2 } };
const TfArray<1, float> quant29_scale = { 1, { 0.072754256427288055, } };
const TfArray<1, int> quant29_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,2 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,15,14 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,2 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 18 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,3 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 20,13,12 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,4 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 22 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,5 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 24,11,10 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,6 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,7 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,9,8 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2544), (TfLiteIntArray*)&g0::tensor_dimension0, 2535, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2535, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3328), (TfLiteIntArray*)&g0::tensor_dimension17, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 624), (TfLiteIntArray*)&g0::tensor_dimension19, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension21, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension23, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1280), (TfLiteIntArray*)&g0::tensor_dimension24, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension25, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension26, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 640), (TfLiteIntArray*)&g0::tensor_dimension27, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 320), (TfLiteIntArray*)&g0::tensor_dimension29, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[15] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 31, };
const size_t tflNodes_subgraph_index[] = {0, 15, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  30, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_968_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 31;
  for (size_t i = 0; i < 31; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_968_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_968_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_968_invoke() {
  for (size_t i = 0; i < 15; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_968_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
